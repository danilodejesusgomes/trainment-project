type Query {
  person(id: ID!): Person
  exam(id: ID!): Exam
  question(id: ID!): Question
  
}

type Person {
  id: ID!
  name: String!
  email: String!
  password: String!
  token_validation_email: Number
  token_validation_email_expiration: Date
  token_reset_password: Number
  token_reset_password_expiration: Date
}

type Exam {
  id: ID!
  nameExam: String!
  descriptionExam: String!
  versionExam: String!
  timeDuration: String!
  quantityTotalQuestions: Number
}

type Question {
  id: ID!
  descriptionQuestion: String!
  explicationQuestionResult: String!
  QuestionSubject: QuestionSubject!
  QuestionType: QuestionType!
  QuestionAlternative: [QuestionAlternative!]
}

type QuestionSubject {
  title: String!
  name: String
}

type QuestionType {
  id: ID!
  name: String!
  quantityChoose: Number
}

type QuestionAlternative {
  idQuestionAlternative: ID!
  Question_id: Int!
  description: String!
  rightAlternative: Boolean!
  explicationWhyResult: String!
}



